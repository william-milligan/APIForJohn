// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SurveyAppApi.Models;
using System;

namespace SurveyAppApi.Migrations
{
    [DbContext(typeof(Data))]
    [Migration("20180817132415_Responses")]
    partial class Responses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SurveyAppApi.Models.CompletedSurvey", b =>
                {
                    b.Property<int>("CompletedSurveyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ParticipantId");

                    b.Property<int>("SurveyId");

                    b.HasKey("CompletedSurveyId");

                    b.HasIndex("SurveyId");

                    b.ToTable("CompletedSurveys");
                });

            modelBuilder.Entity("SurveyAppApi.Models.Constraints", b =>
                {
                    b.Property<int>("ConstraintsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConstraintType");

                    b.Property<string>("PossibleAnswersId");

                    b.Property<int>("QuestionIdTriggeringConstraint");

                    b.Property<int>("QuestionIdWithConstraint");

                    b.Property<int>("SurveyId");

                    b.HasKey("ConstraintsId");

                    b.ToTable("Constraints");
                });

            modelBuilder.Entity("SurveyAppApi.Models.ExcludedResult", b =>
                {
                    b.Property<int>("ExcludedResultId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PossibleAnswersId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("SurveyId");

                    b.HasKey("ExcludedResultId");

                    b.ToTable("ExcludedResults");
                });

            modelBuilder.Entity("SurveyAppApi.Models.InProgressResponse", b =>
                {
                    b.Property<int>("InProgressResponseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<int>("CurrentPage");

                    b.Property<int>("InprogressResponsesId");

                    b.Property<int>("ParticipantId");

                    b.Property<string>("QuestionAsked");

                    b.Property<int>("QuestionNumber");

                    b.Property<int>("SurveyId");

                    b.HasKey("InProgressResponseId");

                    b.HasIndex("InprogressResponsesId");

                    b.ToTable("InProgressResponse");
                });

            modelBuilder.Entity("SurveyAppApi.Models.InProgressResponses", b =>
                {
                    b.Property<int>("InProgressResponsesId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ParticipantId");

                    b.Property<int>("SurveyId");

                    b.Property<string>("SurveyName");

                    b.HasKey("InProgressResponsesId");

                    b.ToTable("InProgressResponses");
                });

            modelBuilder.Entity("SurveyAppApi.Models.OtherQuestions", b =>
                {
                    b.Property<int>("OtherQuestionsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OtherQuestionContent");

                    b.Property<string>("QuestionId");

                    b.Property<int>("SurveyId");

                    b.HasKey("OtherQuestionsId");

                    b.ToTable("OtherQuestions");
                });

            modelBuilder.Entity("SurveyAppApi.Models.Pagination", b =>
                {
                    b.Property<int>("PaginationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentPage");

                    b.Property<int>("EndingQuestionNumber");

                    b.Property<int>("StartingQuestion");

                    b.Property<int>("SurveyId");

                    b.HasKey("PaginationId");

                    b.ToTable("Paginations");
                });

            modelBuilder.Entity("SurveyAppApi.Models.PossibleAnswers", b =>
                {
                    b.Property<int>("PossibleAnswersId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("QuestionId");

                    b.HasKey("PossibleAnswersId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PossibleAnswers");
                });

            modelBuilder.Entity("SurveyAppApi.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("HasSubQuestions");

                    b.Property<bool>("Hidden");

                    b.Property<string>("QuestionAsked");

                    b.Property<int>("QuestionNumber");

                    b.Property<int>("SurveyId");

                    b.Property<bool>("TriggersConstraint");

                    b.Property<string>("Type");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SurveyAppApi.Models.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<int>("CompletedSurveyId");

                    b.Property<string>("QuestionAsked");

                    b.Property<int>("QuestionId");

                    b.HasKey("ResponseId");

                    b.HasIndex("CompletedSurveyId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("SurveyAppApi.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ParticipantId");

                    b.Property<DateTime>("RoleCreatedOn");

                    b.Property<string>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SurveyAppApi.Models.SubQuestions", b =>
                {
                    b.Property<int>("SubQuestionsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("QuestionId");

                    b.Property<int?>("QuestionNumber");

                    b.Property<int>("SurveyId");

                    b.HasKey("SubQuestionsId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SubQuestions");
                });

            modelBuilder.Entity("SurveyAppApi.Models.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("TimeForUserAccess");

                    b.HasKey("SurveyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SurveyAppApi.Models.CompletedSurvey", b =>
                {
                    b.HasOne("SurveyAppApi.Models.Survey", "SurveyTemplate")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SurveyAppApi.Models.InProgressResponse", b =>
                {
                    b.HasOne("SurveyAppApi.Models.InProgressResponses")
                        .WithMany("SavedResponses")
                        .HasForeignKey("InprogressResponsesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SurveyAppApi.Models.PossibleAnswers", b =>
                {
                    b.HasOne("SurveyAppApi.Models.Question", "Question")
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SurveyAppApi.Models.Question", b =>
                {
                    b.HasOne("SurveyAppApi.Models.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SurveyAppApi.Models.Response", b =>
                {
                    b.HasOne("SurveyAppApi.Models.CompletedSurvey")
                        .WithMany("Responses")
                        .HasForeignKey("CompletedSurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SurveyAppApi.Models.SubQuestions", b =>
                {
                    b.HasOne("SurveyAppApi.Models.Question")
                        .WithMany("SubQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
